[--
   Copyright 2016-2018 Immutables Authors and Contributors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
--]
[template public declareFields Attribute a]
[for inst = a.instantiation,
      enc = inst.encoding,
			impl = enc.impl]
[if not impl.virtual]
[doc inst impl]
[annotsJI a impl]
private final [inst.typer impl.type] [inst.directField impl];
[/if]
[for el in enc.element if el.valueField]
[doc inst el]
[annotsJI a el]
[if el.private]private [else]public [/if][if el.final]final [/if][inst.typer el.type] [inst.directField el];
[/for]
[/for]
[/template]

[template public unitializedFieldValue Attribute a]
[for inst = a.instantiation,
      enc = inst.encoding,
			impl = enc.impl]
[if not impl.virtual]
[inst.directField impl] = [impl.unitializedFieldValue];
[/if]
[for el in enc.element if el.valueField]
[inst.directField el] = [el.unitializedFieldValue];
[/for]
[/for]
[/template]

[template public defaultValue Attribute a]
[for inst = a.instantiation,
      enc = inst.encoding,
			impl = enc.impl]
  [if impl.code]
[inst.codeOf impl]
  [else]
null
[output.error a.originalTypeElement]
Could not generate constructor for [a.containingType.typeImmutable.relativeRaw]. Attribute '[a.name]' does not have default value provided in encoding: [inst.encoding.name]
[/output.error]
  [/if]
[/for]
[/template]

[template public shimAssignExtract Attribute a String shim]
[for inst = a.instantiation,
      enc = inst.encoding,
			impl = enc.impl]
[if not impl.virtual]
this.[inst.directField impl] = [shim].[a.names.get]();
[/if]
[for f in enc.element if f.valueField]
this.[inst.directField f] = [shim].[inst.directField f]();
[/for]
[/for]
[/template]

[template public shimFields Attribute a]
[for inst = a.instantiation,
    f in inst.encoding.element if f.valueField]
[doc inst f]
[annots f]
private [inst.typer f.type] [inst.directField f];
[/for]
[/template]

[template public derivedAssign Attribute a]
[for inst = a.instantiation,
    f in inst.encoding.element if f.valueField]
this.[inst.directField f] = [inst.codeDeriveFields f];
[/for]
[/template]

[template public shimAssign Attribute a]
[for inst = a.instantiation,
    f in inst.encoding.element if f.valueField]
this.[inst.directField f] = [inst.codeThisFields f];
[/for]
[/template]

[template public shimAccessor Attribute a]
[for inst = a.instantiation,
    f in inst.encoding.element if f.valueField]

[inst.typer f.type] [inst.directField f]() {
  [a.names.get]();[-- trigger init of impl and helper fields, then return derived field ]
  return [inst.directField f];
}
[/for]
[/template]

[template public constructorAcceptType Attribute a][a.instantiation.typer a.instantiation.encoding.from.firstParam.type][/template]

[template public virtualImpl Attribute a][output.trim]
[for inst = a.instantiation,
      enc = inst.encoding,
			impl = enc.impl]
[inst.typer impl.type] [a.instantiation.decoratedImplFieldName]
[--a.instantiation.namer a.instantiation.encoding.impl]
[/for]
[/output.trim][/template]

[template public copyMethods Attribute a Invokable returnCopy]
[for type = a.containingType,
    inst = a.instantiation,
    el in inst.encoding.element if el.copy]

[doc inst el]
[annots el]
[if el.private]private [else]public [/if][if el.final]final [/if][type.typeImmutable.simple][type.generics.args] [inst.namer el]([for p in el.params][if not for.first], [/if][for ann in p.annotations][ann] [/for][inst.typer p.type] [p.name][/for])[throwsClause inst el] {
  [inst.typer el.type] newValue = [if el.oneLiner][inst.fragmentOf el][else]with_[inst.namer el]([for p in el.params][if not for.first], [/if][p.name][/for])[/if];
  [if not inst.encoding.impl.virtual]
  if (this.[a.name] == newValue) return this;
  [/if]
  [returnCopy]
}
[if not el.oneLiner]

private[if not el.usesThis] static[/if] [inst.typer el.type] with_[inst.namer el]([for p in el.params][if not for.first], [/if][inst.typer p.type] [p.name][/for])[throwsClause inst el] [inst.codeOf el]
[/if]
[/for]
[/template]

[template public builderCopyFrom Attribute a][a.instantiation.namer a.instantiation.encoding.builderCopy][/template]

[template public builderInit Attribute a]
[for inst = a.instantiation, el in inst.encoding.element if el.init]

[doc inst el]
[annotsCIRV a el][-- should be careful about conflicts-]
[if el.builderCopy]
  [for ann in a.builderAttributeAnnotation]
[ann]
  [/for]
[/if]
[if el.private]private [else]public [/if][if el.final]final [/if][builderReturnType a] [inst.namer el]([for p in el.params][if not for.first], [/if][for ann in p.annotations][ann] [/for][inst.typer p.type] [p.name][/for])[throwsClause inst el] [inst.codeOf el]return [builderReturnThis a][/inst.codeOf]
[/for]
[/template]

[template public builderStaticFields Attribute... as]
[for a in as if a.encoding,
    el in a.instantiation.encoding.element if el.builderStaticField]
[declareAuxiliaryField a.instantiation el]
[/for]
[/template]

[template public builderFields Attribute... as]
  [for a in as if a.encoding,
      el in a.instantiation.encoding.element if el.builderField]
[declareAuxiliaryField a.instantiation el]
  [/for]
[/template]

[template public builderHelperMethods Attribute... as]
  [for a in as if a.encoding,
      el in a.instantiation.encoding.element]
[if el.builderMethod or (el.build or el.wasInit)]

[declareMethod a.instantiation el]
[/if]
  [/for]
[/template]

[template public valueHelperMethods Attribute... as]
  [for a in as if a.encoding,
      el in a.instantiation.encoding.element]
[if el.valueMethod]

[declareMethod a.instantiation el]
[else if el.isInlinable][-- this means from, toString, hashCode, equals, copy]
  [if el.copy][--noop intentionally, handled elsewhere--]
  [else if not (a.instantiation.isInlined el)]

[declareMethod a.instantiation el]
  [/if]
[/if]
  [/for]
[/template]

[template public staticFields Attribute... as]
[for a in as if a.encoding,
    inst = a.instantiation,
    enc = inst.encoding,
    el in enc.element if el.staticField]
[declareAuxiliaryField inst el]
[/for]
[/template]

[template public staticMethods Attribute... as]
  [for a in as if a.encoding,
      el in a.instantiation.encoding.element if el.staticMethod]

[declareMethod a.instantiation el]
  [/for]
[/template]

[template public accessor Attribute a String shimName]
[for inst = a.instantiation,
    enc = inst.encoding,
    el = inst.expose]
[eachLine a.accessorInjectedAnnotations]
[annots el][-- encoding authors should be careful not add conflicting annotations here]
[a.access][inst.type] [a.names.get]() [inst.codeOf el]
  [if inst.shimFields]
    [for f in enc.element if f.valueField or (f.implField andnot f.virtual)]

private [inst.typer f.type] [inst.namer f] {
  InitShim shim = this.[shimName];
  return shim != null ? shim.[if f.implField][a.names.get][else][inst.directField f][/if]() : this.[inst.directField f];
}
    [/for]
  [/if]
[/for]
[/template]

[template public from Attribute a String expression][if a.instantiation.hasTrivialFrom][expression][else][a.instantiation.fragmentOf a.instantiation.encoding.from expression][/if][/template]

[template public string Attribute a][a.instantiation.fragmentOf a.instantiation.encoding.string][/template]

[template public hash Attribute a][a.instantiation.fragmentOf a.instantiation.encoding.hash][/template]

[template public equals Attribute a String expression][a.instantiation.fragmentOf a.instantiation.encoding.equals expression][/template]

[template public implType Attribute a][a.instantiation.typer a.instantiation.encoding.impl.type][/template]

[template public fromBuild Attribute a][a.instantiation.fragmentOf a.instantiation.encoding.build][/template]

[template public wasInit Attribute a][a.instantiation.fragmentOf a.instantiation.encoding.isWasInit][/template]

[template declareAuxiliaryField Inst inst Elem el]
[doc inst el]
[if not el.static][eachLine inst.containingType.syntheticFieldsInjectedAnnotations][/if]
[annots el]
[if el.private]private [else]public [/if][if el.static]static [/if][if el.final]final [/if][inst.typer el.type] [inst.namer el][if el.code] = [inst.codeOf el][/if];
[/template]

[template declareMethod Inst inst Elem el]
[doc inst el]
[annots el]
[if el.private]private [else]public [/if][if el.static]static [/if][if el.final]final [/if][inst.ownTypeParams el][inst.typer el.type] [inst.namer el]([for p in el.params][if not for.first], [/if][inst.typer p.type] [p.name][/for])[throwsClause inst el] [inst.codeOf el]
[/template]

[template throwsClause Inst inst Elem el][if el.thrown]throws [for t in el.thrown][if not for.first], [/if][inst.typer t][/for][/if][/template]

[template builderReturnThis Attribute a][if a.containingType.innerBuilder.isExtending]([a.containingType.typeBuilder]) [/if]this[/template]

[template builderReturnType Attribute a][if a.containingType.innerBuilder.isExtending][a.containingType.typeBuilder][else][a.containingType.typeBuilder.simple][a.containingType.generics.args][/if][/template]

[template doc Inst inst Elem el]
[if singular el.doc]
/** [for d in el.doc][inst.filterDoc d][/for] */
[else if el.doc]
/**
[for d in el.doc]
 *[inst.filterDoc d]
[/for]
 */
[/if]
[/template]

[template annots Elem el]
[for a in el.annotations]
[a]
[/for]
[/template]

[template annotsJI Attribute s Elem el]
[eachLine s.fieldInjectedAnnotations]
[if s.containingType.generateJacksonIngoreFields]
[for a in el.annotations if not (a startsWith '@com.fasterxml.jackson.annotation.JsonIgnore')]
[a]
[/for]
@com.fasterxml.jackson.annotation.JsonIgnore
[else]
[annots el]
[/if]
[/template]

[template annotsCIRV Attribute s Elem el]
[eachLine s.initializerInjectedAnnotations]
[for a in el.annotations if not (a startsWith '@com.google.errorprone.annotations.CanIgnoreReturnValue')]
[a]
[/for]
[if s allowsClasspathAnnotation 'com.google.errorprone.annotations.CanIgnoreReturnValue']@com.google.errorprone.annotations.CanIgnoreReturnValue[/if]
[/template]

[template eachLine Object... lines][for l in lines]
[l]
[/for][/template]
