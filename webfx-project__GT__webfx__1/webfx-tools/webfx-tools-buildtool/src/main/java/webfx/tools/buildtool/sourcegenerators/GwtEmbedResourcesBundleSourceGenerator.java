package webfx.tools.buildtool.sourcegenerators;

import webfx.tools.buildtool.ProjectModule;
import webfx.tools.buildtool.util.textfile.TextFileReaderWriter;

import java.nio.file.Path;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * @author Bruno Salmon
 */
final class GwtEmbedResourcesBundleSourceGenerator {

	private final static String TEMPLATE = "// Generated by Webfx\n" + "package ${package};\n" + "\n"
			+ "import com.google.gwt.core.client.GWT;\n" + "import com.google.gwt.resources.client.ClientBundle;\n"
			+ "import com.google.gwt.resources.client.TextResource;\n"
			+ "import webfx.platform.gwt.services.resource.spi.impl.GwtResourceBundleBase;\n" + "\n"
			+ "public interface EmbedResourcesBundle extends ClientBundle {\n" + "\n"
			+ "    EmbedResourcesBundle R = GWT.create(EmbedResourcesBundle.class);\n" + "\n" + "${resourceDeclaration}"
			+ "    final class ProvidedGwtResourceBundle extends GwtResourceBundleBase {\n"
			+ "        public ProvidedGwtResourceBundle() {\n" + "${resourceRegistration}" + "        }\n" + "    }\n"
			+ "}\n";

	static void generateGwtClientBundleSource(ProjectModule module) {
		//GwtFilesGenerator.logSection("Generating " + module.getName() + " module EmbedResourcesBundle super source for GWT");
		StringBuilder resourceDeclaration = new StringBuilder();
		StringBuilder resourceRegistration = new StringBuilder();
		AtomicInteger resourceNumber = new AtomicInteger();
		ProjectModule.filterProjectModules(module.getThisAndTransitiveModules())
				.flatMap(ProjectModule::getEmbedResources).stream().sorted().forEach(r -> {
					String resourceMethodName = "r" + resourceNumber.incrementAndGet();
					resourceDeclaration.append("    @Source(\"").append(r).append("\")\n").append("    TextResource ")
							.append(resourceMethodName).append("();\n\n");
					resourceRegistration.append("            registerResource(\"").append(r).append("\", R.")
							.append(resourceMethodName).append("());\n");
				});
		String packageName = getPackageName(module);
		String source = resourceNumber.get() == 0 ? null // if no resource, setting the source to null so writeTextFile() will actually delete the file if exists
				: TEMPLATE.replace("${package}", packageName).replace("${resourceDeclaration}", resourceDeclaration)
						.replace("${resourceRegistration}", resourceRegistration);
		TextFileReaderWriter.writeTextFileIfNewOrModified(source, getJavaFilePath(module));
	}

	static String getPackageName(ProjectModule module) {
		return module.getJavaModuleFile().getJavaModuleName() + ".embed";
	}

	static Path getJavaFilePath(ProjectModule module) {
		return module.getResourcesDirectory().resolve("super").resolve(getPackageName(module).replaceAll("\\.", "/"))
				.resolve("EmbedResourcesBundle.java");
	}

	static String getProviderClassName(ProjectModule module) {
		return getPackageName(module) + ".EmbedResourcesBundle$ProvidedGwtResourceBundle";
	}
}
