[template public generate]
  [for model in allMirrors]
[output.java model.package (model.name 'Mirror') model.element]
[generateMirror model]
[/output.java]
  [/for]
[/template]

[template generateMirror MirrorModel m]
package [m.package];

import javax.lang.model.element.*;
import javax.lang.model.type.*;
import javax.lang.model.util.*;
import [guava].base.Verify;
import [guava].base.Preconditions;
import [guava].base.Optional;
import [guava].collect.ImmutableList;
import java.lang.Object;
import java.lang.String;

/**
 * [m.name]Mirror used to parse data of AnnotationMirror for original annotation {@code [m.qualifiedName]}
 * during annotation processing. Interface is being described using {@link [m.element.qualifiedName]} annotation,
 * which should be structurally compatible to the annotation being modelled.
 * @see #find(Iterable)
 * @see #from(AnnotationMirror)
 */
@SuppressWarnings("all")
public class [m.name]Mirror implements [m.element.qualifiedName] {
  public static final String QUALIFIED_NAME = "[m.qualifiedName]";
  public static final String MIRROR_QUALIFIED_NAME = "[m.element.qualifiedName]";

  public static String mirrorQualifiedName() {
    return QUALIFIED_NAME;
  }

  public static String qualifiedName() {
    return QUALIFIED_NAME;
  }

  public static String simpleName() {
    return "[m.simpleName]";
  }

  public static boolean isPresent(Element annotatedElement) {
    for (AnnotationMirror mirror : annotatedElement.getAnnotationMirrors()) {
      TypeElement element = (TypeElement) mirror.getAnnotationType().asElement();
      if (element.getQualifiedName().contentEquals(QUALIFIED_NAME)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Finds first annotation of this type on the element.
   * @param element annotated element
   * @return optional {@code [m.name]Mirror}, present if this annotation found
   */
  public static Optional<[m.name]Mirror> find(Element element) {
    return find(element.getAnnotationMirrors());
  }

  /**
   * Finds first annotation of this type in an iterable of annotation mirrors.
   * @param mirrors annotation mirrors
   * @return optional {@code [m.name]Mirror}, present if this annotation found
   */
  public static Optional<[m.name]Mirror> find(Iterable<? extends AnnotationMirror> mirrors) {
    for (AnnotationMirror mirror : mirrors) {
      TypeElement element = (TypeElement) mirror.getAnnotationType().asElement();
      if (element.getQualifiedName().contentEquals(QUALIFIED_NAME)) {
        return Optional.of(new [m.name]Mirror(mirror));
      }
    }
    return Optional.absent();
  }

  /**
   * Converts iterable of annotation mirrors where all annotation are of this type. Otherwise it fails
   * @param mirrors of this annotation type.
   * @return list of converted {@code [m.name]Mirror}s
   */
  public static ImmutableList<[m.name]Mirror> fromAll(Iterable<? extends AnnotationMirror> mirrors) {
    ImmutableList.Builder<[m.name]Mirror> builder = ImmutableList.builder();
    for (AnnotationMirror mirror : mirrors) {
      TypeElement element = (TypeElement) mirror.getAnnotationType().asElement();
      Preconditions.checkState(element.getQualifiedName().contentEquals(QUALIFIED_NAME),
          "Supplied mirrors should all be of this annotation type");
      builder.add(new [m.name]Mirror(mirror));
    }
    return builder.build();
  }

  /**
   * Creates mirror with default values using annotation element (i.e. declaration, not usage).
   * @param element annotation type element
   * @return {@code [m.name]Mirror}
   */
  public static [m.name]Mirror from(TypeElement element) {
    return new [m.name]Mirror(element);
  }

  /**
   * Tries to convert annotation mirror to this annotation type.
   * @param mirror annotation mirror
   * @return optional {@code [m.name]Mirror}, present if mirror matched this annotation type
   */
  public static Optional<[m.name]Mirror> from(AnnotationMirror mirror) {
    return find(java.util.Collections.singleton(mirror));
  }

  private final AnnotationMirror annotationMirror;
[for a in m.attributes]
  private final [targetAttributeType a][a.suffix] [a.name];
  [if a.kind.type]
  private final String[a.suffix] [a.name]Name;
  [/if]
  [if a.mirrorModel]
  private final [mirrorType a][a.suffix] [a.name]Mirror;
  [/if]
[/for]

  private [m.name]Mirror(TypeElement defaultAnnotationElement) {
    Preconditions.checkArgument(defaultAnnotationElement.getQualifiedName().contentEquals(QUALIFIED_NAME)
        || defaultAnnotationElement.getQualifiedName().contentEquals(MIRROR_QUALIFIED_NAME));
    this.annotationMirror = null;

    // TBD TODO BIG

  [if m.attributes]
  [for a in m.attributes]
    [if a.kind.type]
    TypeMirror[a.suffix] [a.name] = null;
    String[a.suffix] [a.name]Name = null;
    [else if a.kind.annotation]
    AnnotationMirror[a.suffix] [a.name] = null;
      [if a.mirrorModel]
    [mirrorType a][a.suffix] [a.name]Mirror = null;
      [/if]
    [else if a.kind.primitive]
    [a.type][a.suffix] [a.name] = [if a.boolean]false[else]0[/if];
    [else]
    [a.type][a.suffix] [a.name] = null;
    [/if]
  [/for]

    for (ExecutableElement attributeElement$
        : ElementFilter.methodsIn(defaultAnnotationElement.getEnclosedElements())) {
      String name$ = attributeElement$.getSimpleName().toString();
      [for a in m.attributes]
      if ("[a.name]".equals(name$)) {
        AnnotationValue annotationValue$ = attributeElement$.getDefaultValue();
        if (annotationValue$ == null) {
          throw new IllegalStateException("All annotation attributes should have default value to create mirror of @[m.simpleName]");
        }
        [toUpper a.name]Extractor [a.name]Extractor$ = new [toUpper a.name]Extractor();
        annotationValue$.accept([a.name]Extractor$, null);

          [if a.kind.type]
        [a.name] = [a.name]Extractor$.get();
        [a.name]Name = [a.name]Extractor$.name();
          [else if a.kind.annotation]
        [a.name] = [a.name]Extractor$.get();
            [if a.mirrorModel]
        [a.name]Mirror = [a.name]Extractor$.mirror();
            [/if]
          [else]
        [a.name] = [a.name]Extractor$.get();
          [/if]
        continue;
      }
      [/for]
    }
    [for a in m.attributes]
      [if a.kind.type]
    this.[a.name] = Preconditions.checkNotNull([a.name], "default attribute '[a.name]'");
    this.[a.name]Name = Preconditions.checkNotNull([a.name]Name, "default attribute '[a.name]'");
      [else if a.kind.annotation]
    this.[a.name] = Preconditions.checkNotNull([a.name], "default attribute '[a.name]'");
         [if a.mirrorModel]
    this.[a.name]Mirror = Preconditions.checkNotNull([a.name]Mirror, "default attribute '[a.name]'");
         [/if]
      [else if a.kind.primitive]
    this.[a.name] = [a.name];
      [else]
    this.[a.name] = Preconditions.checkNotNull([a.name], "default attribute '[a.name]'");
      [/if]
    [/for]
  [/if]
  }

  private [m.name]Mirror(AnnotationMirror annotationMirror) {
    this.annotationMirror = annotationMirror;

  [if m.attributes]
  [for a in m.attributes]
    [if a.kind.type]
    TypeMirror[a.suffix] [a.name] = null;
    String[a.suffix] [a.name]Name = null;
    [else if a.kind.annotation]
    AnnotationMirror[a.suffix] [a.name] = null;
      [if a.mirrorModel]
    [mirrorType a][a.suffix] [a.name]Mirror = null;
      [/if]
    [else if a.kind.primitive]
    [a.type][a.suffix] [a.name] = [if a.boolean]false[else]0[/if];
    [else]
    [a.type][a.suffix] [a.name] = null;
    [/if]
  [/for]

    java.util.Map<? extends ExecutableElement, ? extends AnnotationValue> attributeValues$ = annotationMirror.getElementValues();
    for (ExecutableElement attributeElement$
        : ElementFilter.methodsIn(annotationMirror.getAnnotationType().asElement().getEnclosedElements())) {
      String name$ = attributeElement$.getSimpleName().toString();
      [for a in m.attributes]
      if ("[a.name]".equals(name$)) {
        AnnotationValue annotationValue$ = attributeValues$.get(attributeElement$);
        if (annotationValue$ == null) {
          annotationValue$ = attributeElement$.getDefaultValue();
        }
        if (annotationValue$ == null) {
          throw new IllegalStateException("Annotation mirror contains no value (neither default) for '[a.name]' attribute of @[m.simpleName]");
        }
        [toUpper a.name]Extractor [a.name]Extractor$ = new [toUpper a.name]Extractor();
        annotationValue$.accept([a.name]Extractor$, null);

          [if a.kind.type]
        [a.name] = [a.name]Extractor$.get();
        [a.name]Name = [a.name]Extractor$.name();
          [else if a.kind.annotation]
        [a.name] = [a.name]Extractor$.get();
            [if a.mirrorModel]
        [a.name]Mirror = [a.name]Extractor$.mirror();
            [/if]
          [else]
        [a.name] = [a.name]Extractor$.get();
          [/if]
        continue;
      }
      [/for]
    }
    [for a in m.attributes]
      [if a.kind.type]
    this.[a.name] = Preconditions.checkNotNull([a.name], "value for '[a.name]'");
    this.[a.name]Name = Preconditions.checkNotNull([a.name]Name, "Value for '[a.name]'");
      [else if a.kind.annotation]
    this.[a.name] = Preconditions.checkNotNull([a.name], "value for '[a.name]'");
         [if a.mirrorModel]
    this.[a.name]Mirror = Preconditions.checkNotNull([a.name]Mirror, "value for '[a.name]'");
         [/if]
      [else if a.kind.primitive]
    this.[a.name] = [a.name];
      [else]
    this.[a.name] = Preconditions.checkNotNull([a.name], "value for '[a.name]'");
      [/if]
    [/for]
  [/if]
  }
[for a in m.attributes]
  [if a.kind.type]

  /**
   * @return type name for value of attribute {@code [a.name]}
   */
  public String[a.suffix] [a.name]Name() {
    return [a.name]Name[if a.array].clone()[/if];
  }

  /**
   * @return type mirror for value of attribute {@code [a.name]}
   */
  public [targetAttributeType a][a.suffix] [a.name]Mirror() {
    return [a.name][if a.array].clone()[/if];
  }

  /**
   * @deprecated Always throws UnsupportedOperationException. Use {@link #[a.name]Mirror} or {@link [a.name]Name}.
   */
  @Deprecated
  @Override
  public [a.type][a.suffix] [a.name]() {
    throw new UnsupportedOperationException("Use '[a.name]Mirror()' or '[a.name]Name()'");
  }
  [else if a.kind.annotation]

  /**
   * @return annotation mirror for value of attribute {@code [a.name]}
   */
  public [targetAttributeType a][a.suffix] [a.name]Mirror() {
    return [a.name][if a.array].clone()[/if];
  }
    [if a.mirrorModel]

  /**
   * @return reified annotation mirror for {@link [a.type]}
   */
  @Override
  public [mirrorType a][a.suffix] [a.name]() {
    return [a.name]Mirror;
  }
    [else]

  /**
   * @deprecated Always throws UnsupportedOperationException. Use {@link #[a.name]Mirror()}.
   */
  @Deprecated
  @Override
  public [a.type][a.suffix] [a.name]() {
    throw new UnsupportedOperationException("Use '[a.name]Mirror()' to get to the annotation value");
  }
    [/if]
  [else]

  /**
   * @return value of attribute {@code [a.name]}
   */
  @Override
  public [a.type][a.suffix] [a.name]() {
    return [a.name][if a.array].clone()[/if];
  }
  [/if]
[/for]

  /**
   * @return underlying annotation mirror
   */
  public AnnotationMirror getAnnotationMirror() {
    Preconditions.checkState(annotationMirror != null, "this is default mirror without originating AnnotationMirror");
    return annotationMirror;
  }

  /**
   * @return {@code [m.name].class}
   */
  @Override
  public Class<? extends java.lang.annotation.Annotation> annotationType() {
    return [m.element.qualifiedName].class;
  }

  @Override
  public int hashCode() {
    int h = 0;
[for a in m.attributes]
  [if a.array]
    h += 127 * "[a.name]".hashCode() ^ java.util.Arrays.hashCode([a.name][if a.kind.type]Name[/if]);
  [else if a.kind.primitive]
    h += 127 * "[a.name]".hashCode() ^ [guava].primitives.[toUpper a.type]s.hashCode([a.name]);
  [else]
    h += 127 * "[a.name]".hashCode() ^ [a.name][if a.kind.type]Name[/if].hashCode();
  [/if]
[/for]
    return h;
  }

  @Override
  public boolean equals(Object other) {
    if (other instanceof [m.name]Mirror) {
      [m.name]Mirror otherMirror = ([m.name]Mirror) other;
      return [if not m.attributes]true[/if][for a in m.attributes][if not for.first]
          && [/if][equalsAttribute a][/for];
    }
    return false;
  }

  @Override
  public String toString() {
    return "[m.name]Mirror:" + annotationMirror;
  }
[for a in m.attributes]
  [attributeExtractor a]
[/for]
}
[/template]

[template attributeExtractor AttributeModel a]
[let brackets]['[]'][/let]
[let targetType][targetAttributeType a][/let]

private static class [toUpper a.name]Extractor extends SimpleAnnotationValueVisitor7<Void, Void> {
[if a.array]
  [targetType][brackets] values;
  int position;

  @Override
    [if a.kind.type]
  public Void visitType(TypeMirror value, Void p) {
    this.values['[']position++[']'] = value;
    [else if a.kind.enum]
  public Void visitEnumConstant(VariableElement value, Void p) {
    this.values['[']position++[']'] = [a.type].valueOf(value.getSimpleName().toString());
    [else if a.kind.annotation]
  public Void visitAnnotation(AnnotationMirror value, Void p) {
    this.values['[']position++[']'] = value;
    [else if a.kind.string]
  public Void visitString(String value, Void p) {
    this.values['[']position++[']'] = value;
    [else]
  public Void visit[toUpper targetType]([targetType] value, Void p) {
    this.values['[']position++[']'] = value;
    [/if]
    return null;
  }

  @Override
  public Void visitArray(java.util.List<? extends AnnotationValue> array, Void p) {
    this.values = new [targetType]['[']array.size()[']'];
    Verify.verify(position == 0);
    for (AnnotationValue value : array) {
      value.accept(this, null);
    }
    return null;
  }

  [targetType][brackets] get() {
    return values;
  }
  [if a.kind.type]

  public String[brackets] name() {
    String[brackets] names = new String['[']values.length[']'];
    for (int i = 0; i < values.length; i++) {
      names['[i]'] = values['[i]'].toString();
    }
    return names;
  }
  [/if]
  [if a.mirrorModel]

  public [mirrorType a][brackets] mirror() {
    [mirrorType a][brackets] mirrors = new [mirrorType a]['[']values.length[']'];
    for (int i = 0; i < values.length; i++) {
      mirrors['[i]'] = [mirrorType a].from(values['[i]']).get();
    }
    return mirrors;
  }
  [/if]
[else]
  [targetType] value;

  @Override
    [if a.kind.type]
  public Void visitType(TypeMirror value, Void p) {
    this.value = value;
    [else if a.kind.enum]
  public Void visitEnumConstant(VariableElement value, Void p) {
    this.value = [a.type].valueOf(value.getSimpleName().toString());
    [else if a.kind.annotation]
  public Void visitAnnotation(AnnotationMirror value, Void p) {
    this.value = value;
    [else if a.kind.string]
  public Void visitString(String value, Void p) {
    this.value = value;
    [else]
  public Void visit[toUpper targetType]([targetType] value, Void p) {
    this.value = value;
    [/if]
    return null;
  }

  @Override
  public Void visitArray(java.util.List<? extends AnnotationValue> array, Void p) {
    Preconditions.checkState(!array.isEmpty());
    array.get(0).accept(this, null);
    return null;
  }

  [targetType] get() {
    return value;
  }
  [if a.kind.type]

  public String name() {
    return value.toString();
  }
  [/if]
  [if a.mirrorModel]

  public [mirrorType a] mirror() {
    return [mirrorType a].from(value).get();
  }
  [/if]
[/if]

  @Override
  protected Void defaultAction(Object o, Void p) {
    throw new IllegalStateException("Incompatible annotation content of attribute '[a.name]' in @" + QUALIFIED_NAME);
  }
}
[/template]

[template mirrorType AttributeModel a][a.mirrorModel.package].[a.mirrorModel.name]Mirror[/template]

[template targetAttributeType AttributeModel a][output.trim]
  [if a.kind.type]
    TypeMirror
  [else if a.kind.annotation]
    AnnotationMirror
  [else]
    [a.type]
  [/if]
[/output.trim][/template]

[template equalsAttribute AttributeModel a][output.trim]
[let getOther]otherMirror.[a.name][if a.kind.type]Name[/if][/let]
[let getThis][a.name][if a.kind.type]Name[/if][/let]
[if a.array]
  java.util.Arrays.equals([getThis], [getOther])
[else if a.float]
  Float.floatToIntBits([getThis]) == Float.floatToIntBits([getOther])
[else if a.double]
  Double.doubleToLongBits([getThis]) == Double.doubleToLongBits([getOther])
[else if a.kind.primitive]
  [getThis] == [getOther]
[else]
  [getThis].equals([getOther])
[/if]
[/output.trim][/template]

[template guava]co['m.google.com']mon[/template][-- this is to hide from jar shading/class relocation in string constants --]
