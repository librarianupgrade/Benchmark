[--
   Copyright 2015-2018 Immutables Authors and Contributors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
--]
[template public generate]
  [for type in values.values if type.generateAst]
    [if type.kind.isEnclosing andnot type.kind.isValue]
[for String astTypeName = ((toUpper type.name) 'Ast')]
[output.java type.package astTypeName type.element]
[type.sourceHeader]
[generateParboiled type astTypeName]
[/output.java]
[/for]
    [else]
[output.error]
Use @Trees.Ast to annotate umbrella class with @Value.Enclosing, but not @Value.Immutable
[/output.error]
    [/if]
  [/for]
[/template]

[template generateParboiled Type type String astTypeName]
[if type.package]
package [type.package];
[/if]

import org.immutables.trees.ast.Extractions;
import java.lang.String;

[if type.generatedSuppressWarnings]
@SuppressWarnings({[for k in type.generatedSuppressWarnings][if not for.first], [/if][literal k][/for]})
[/if]
[if type allowsClasspathAnnotation 'javax.annotation.ParametersAreNonnullByDefault']
@javax.annotation.ParametersAreNonnullByDefault
[/if]
[if type allowsClasspathAnnotation 'javax.annotation.processing.Generated']
@javax.annotation.processing.Generated("org.immutables.processor.ProxyProcessor")
[else if type allowsClasspathAnnotation 'javax.annotation.Generated']
@javax.annotation.Generated("org.immutables.processor.ProxyProcessor")
[/if]
[if type allowsClasspathAnnotation 'org.immutables.value.Generated']
@org.immutables.value.Generated(from = "[type.typeAbstract.relativeRaw]", generator = "Asts")
[/if]
[type.typeValue.access]final class [astTypeName] {
  private [astTypeName]() {}
[for v in type.nested]
  [generateParboiledType v]
[/for]
}
[/template]

[template generateParboiledType Type type]

[if type allowsClasspathAnnotation 'javax.annotation.processing.Generated']
@javax.annotation.processing.Generated({"Asts.generator", "[type.typeAbstract.relative]"})
[else if type allowsClasspathAnnotation 'javax.annotation.Generated']
@javax.annotation.Generated({"Asts.generator", "[type.typeAbstract.relative]"})
[/if]
public static class [type.name] {
  private [type.name]() {}
[if type.useSingleton]

  public static Extractions.Extractor<[type.typeAbstract]> [type.names.instance]() {
    return new Extractions.Instance<[type.typeAbstract]>() {
      @Override
      public [type.typeAbstract] get() {
        return [type.factoryInstance]();
      }
      @Override
      public String toString() {
        return "[type.name].[type.names.instance]()";
      }
    };
  }
[/if]
[if type.hasSingleParameterConstructor]
  [for c in type.constructorArguments]
  [if c.stringType]

  public static Extractions.Extractor<[type.typeAbstract]> [type.names.of]() {
    return of(Extractions.matched());
  }
  [else]

  public static Extractions.Extractor<[type.typeAbstract]> [type.names.of]() {
    return of(Extractions.<[c.wrapperType]>popped());
  }
  [/if]

  public static Extractions.Extractor<[type.typeAbstract]> [type.names.of](Extractions.Extractor<[c.wrapperType]> [c.name]) {
    return new Extractions.Construct<[type.typeAbstract], [c.wrapperType]>([c.name]) {
      @Override
      public [type.typeAbstract] get([c.wrapperType] value) {
        return [type.factoryOf](value);
      }
      @Override
      public String toString() {
        return "[type.name].[type.names.of]()";
      }
    };
  }
  [/for]
[/if]
[if type.useBuilder]

  public static Extractions.Applicator [type.names.builder]() {
    return new Extractions.Builder<[type.typeBuilder]>() {
      @Override
      public [type.typeBuilder] builder() {
        return [type.factoryBuilder]();
      }
      @Override
      public String toString() {
        return "[type.name].[type.names.builder]()";
      }
    };
  }

  public static Extractions.Extractor<[type.typeAbstract]> [type.names.build]() {
    return new Extractions.Build<[type.typeBuilder], [type.typeAbstract]>() {
      @Override
      public [type.typeAbstract] build([type.typeBuilder] builder) {
        return builder.[type.names.build]();
      }
      @Override
      public String toString() {
        return "[type.name].[type.names.build]()";
      }
    };
  }
  [for a in type.implementedAttributes]
  [if a.collectionType]

  public static Extractions.Applicator [a.names.add]() {
    return [a.names.add](Extractions.<[a.wrappedElementType]>popped());
  }

  public static Extractions.Applicator [a.names.add](Extractions.Extractor<? extends [a.wrappedElementType]> [a.name]Element) {
    return new Extractions.Specify<[type.typeBuilder], [a.wrappedElementType]>([a.name]Element) {
      @Override
      public void specify([type.typeBuilder] builder, [a.wrappedElementType] value) {
        builder.[a.names.add](value);
      }
      @Override
      public String toString() {
        return "[type.name].[a.names.add]()";
      }
    };
  }
  [else if a.mapType]
  [-- we skip map types, we assume ast might get along without having maps, or could derive maps from list of some entries --]
  [else if a.optionalType]

  public static Extractions.Applicator [a.names.init]() {
    return [a.names.init](Extractions.<[a.wrappedElementType]>popped());
  }

  public static Extractions.Applicator [a.names.init](Extractions.Extractor<? extends [a.wrappedElementType]> [a.name]) {
    return new Extractions.Specify<[type.typeBuilder], [a.wrappedElementType]>([a.name]) {
      @Override
      public void specify([type.typeBuilder] builder, [a.wrappedElementType] value) {
        builder.[a.names.init](value);
      }
      @Override
      public String toString() {
        return "[type.name].[a.names.init]()";
      }
    };
  }
  [else]
    [if a.simpleLiteralType]

  public static Extractions.Applicator [a.names.init]([a.type] value) {
    return [a.names.init](Extractions.<[a.wrapperType]>value(value));
  }
    [/if]

  public static Extractions.Applicator [a.names.init]() {
    return [a.names.init](Extractions.<[a.wrapperType]>popped());
  }

  public static Extractions.Applicator [a.names.init](Extractions.Extractor<[a.wrapperType]> [a.name]) {
    return new Extractions.Specify<[type.typeBuilder], [a.wrapperType]>([a.name]) {
      @Override
      public void specify([type.typeBuilder] builder, [a.wrapperType] value) {
        builder.[a.names.init](value);
      }
      @Override
      public String toString() {
        return "[type.name].[a.names.init]()";
      }
    };
  }
  [/if]
  [/for]
[/if]
}
[/template]
