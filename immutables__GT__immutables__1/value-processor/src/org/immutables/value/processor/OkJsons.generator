[--
   Copyright 2015-2018 Immutables Authors and Contributors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
--]
[template public generate]
  [for adapters in typeAdapters,
      packageName = adapters.packageGenerated,
      simpleName = adapters.definedBy.simpleName,
      String capitalizedSimpleName = toUpper simpleName,
      String typeAdaptersName = ('JsonAdapters' capitalizedSimpleName)]

[setCurrent adapters]
[output.java packageName typeAdaptersName adapters.definedBy.element]
[for d = adapters.definedBy,
     s in d.style if s.headerComments,
     t in d.asType]
[t.associatedTopLevel.headerComments]
[/for]
[generateAdapters packageName simpleName typeAdaptersName]
[/output.java]
  [/for]
[/template]

[template generateAdapters
    String packageName
    String simpleName
    String typeAdaptersName]
[for Type... allValues = adapted.types]
[if packageName]
package [packageName];
[/if]

import java.io.IOException;
import java.lang.String;
[for t in allValues]
  [for starImport in t.requiredSourceStarImports]
import [starImport];
  [/for]
[/for]

/**
 * A {@code JsonAdapter.Factory} that handles all of the immutable types generated under {@code [simpleName]}.
 [for v in allValues]
 * @see [v.typeValue.relativeRaw]
 [/for]
 */
 @SuppressWarnings("all")
[for v in allValues][if for.first][-- this is only needed to get to first available value's style --]
[if v allowsClasspathAnnotation 'javax.annotation.ParametersAreNonnullByDefault']
@javax.annotation.ParametersAreNonnullByDefault
[/if]
[if v allowsClasspathAnnotation 'javax.annotation.processing.Generated']
@javax.annotation.processing.Generated("org.immutables.processor.ProxyProcessor")
[else if v allowsClasspathAnnotation 'javax.annotation.Generated']
@javax.annotation.Generated("org.immutables.processor.ProxyProcessor")
[/if]
[if v allowsClasspathAnnotation 'org.immutables.value.Generated']
@org.immutables.value.Generated(from = "[packageName]", generator = "OkJsons")
[/if]
[/if][/for]
public final class [typeAdaptersName] implements com.squareup.moshi.JsonAdapter.Factory {
  private final java.util.Set<? extends java.lang.annotation.Annotation> annotations;

  public [typeAdaptersName](java.util.Set<? extends java.lang.annotation.Annotation> annotations) {
    if (annotations == null) throw new java.lang.NullPointerException("annotations");
    this.annotations = annotations;
  }

  public [typeAdaptersName]() {
    this.annotations = java.util.Collections.<java.lang.annotation.Annotation>emptySet();
  }

  @Override
  public com.squareup.moshi.JsonAdapter<?> create(java.lang.reflect.Type type, java.util.Set<? extends java.lang.annotation.Annotation> annotations, com.squareup.moshi.Moshi moshi) {
    [if allValues]
    if (this.annotations.equals(annotations)) {
      [for v in allValues, t = v.typeAbstract, im = v.typeImmutable]
      if (type == [t].class || type == [im].class) {
        [if adapted.requireAdapters v]
        return new [v.name]Adapter(moshi);
        [else]
        return [v.name]Adapter.INSTANCE;
        [/if]
      }
      [/for]
    }
    [/if]
    return null;
  }

  @Override
  public String toString() {
    return "[typeAdaptersName]([for v in allValues][if not for.first], [/if][v.name][/for])";
  }
  [for v in allValues]
  [generateAdapter v]
  [/for]
  [generateUtility adapted]
}
[/for]
[/template]

[template generateAdapter Type type]
[checkAttributes type]
[for allAttributes = type.allMarshalingAttributes, t = type.typeAbstract, im = type.typeImmutable]

private static class [type.name]Adapter extends com.squareup.moshi.JsonAdapter<[t]> {
[if adapted.requireAdapters type]
  [for a in allAttributes,
      Decider decider = adapted.decider a,
      af = decider.adapterFull,
      a1 = decider.adapterFirst,
      a2 = decider.adapterSecond]
    [if af]
      [if af.reflect]
  static final[for q in a.jsonQualiferAnnotations] [q][/for] [af.type] [toConstant a.name]_TYPE = null;
      [/if]
    [else]
      [if a1][if a1.reflect]
  static final [a1.type] [toConstant a.name]_TYPE1 = null;
      [/if][/if]
      [if a2][if a2.reflect]
  static final [a2.type] [toConstant a.name]_TYPE2 = null;
      [/if][/if]
    [/if]
  [/for]
  [for a in allAttributes,
      Decider decider = adapted.decider a,
      af = decider.adapterFull,
      a1 = decider.adapterFirst,
      a2 = decider.adapterSecond]
    [if af]
  private final com.squareup.moshi.JsonAdapter<[af.type]> [a.name]Adapter;
    [else]
      [if a1]
  private final com.squareup.moshi.JsonAdapter<[a1.type]> [a.name]Adapter1;
      [/if]
      [if a2]
  private final com.squareup.moshi.JsonAdapter<[a2.type]> [a.name]Adapter2;
      [/if]
    [/if]
  [/for]

  [type.name]Adapter(com.squareup.moshi.Moshi moshi) {
  [for a in allAttributes,
      Decider decider = adapted.decider a,
      af = decider.adapterFull,
      a1 = decider.adapterFirst,
      a2 = decider.adapterSecond]
    [if af]
    [getAdapterFromMoshi a.name af.type af.reflect ''];
    [else]
      [if a1]
    [getAdapterFromMoshi a.name a1.type a1.reflect '1'];
      [/if]
      [if a2]
    [getAdapterFromMoshi a.name a2.type a2.reflect '2'];
      [/if]
    [/if]
  [/for]
  }
[else]
  static final [type.name]Adapter INSTANCE = new [type.name]Adapter();
[/if]
  [--generateMarshalingMethods type]
  [--generateUnmarshalingMethods type]
}
[/for]
[/template]

[template getAdapterFromMoshi String name String type Boolean reflect String suffix]
[if reflect]
this.[name]Adapter[suffix] = adapter(moshi, getClass(), "[toConstant name]_TYPE[suffix]");
[else]
this.[name]Adapter[suffix] = moshi.adapter([type].class);
[/if]
[/template]

[template generateMarshalingMethods Type type]

@Override
public void toJson(com.squareup.moshi.JsonWriter out, [type.typeAbstract] instance) throws IOException {
[if type.useConstructorOnly]
  [for ca = type.constructorArguments]
  [if singular ca]
  [for a in ca]
  [generateMarshalConstructorValue type a]
  [/for]
  [else]
  out.beginArray();
  [for a in ca]
  [generateMarshalConstructorValue type a]
  [/for]
  out.endArray();
  [/if]
  [/for]
[else]
  out.beginObject();
  [for a in type.marshaledAttributes]

  [generateMarshalAttributeValue type a]
  [/for]

  out.endObject();
[/if]
}
[/template]

[template generateMarshalConstructorValue Type type Attribute a]
  [if a.nullable]
[a.atNullabilityLocal][a.type] [a.name]Value = instance.[a.names.get]();
if ([a.name]Value != null) {
  [generateWriteAttributeValue type a (a.name 'Value') false]
} else {
  out.nullValue();
}
  [else if a.optionalType]
[a.type] [a.name]Optional = instance.[a.names.get]();
if ([a.name]Optional.[optionalPresent a]) {
  [a.unwrappedElementType] [a.name]Value = [a.name]Optional.[optionalGet a];
  [generateWriteAttributeValue type a (a.name 'Value') false]
} else {
  out.nullValue();
}
  [else if a.mapType]
[a.type] [a.name]Mapping = instance.[a.names.get]();
[generateMarshalMapping type a]
  [else if a.collectionType or a.arrayType]
out.beginArray();
for ([a.unwrappedElementType] e : instance.[a.names.get]()) {
  [generateWriteAttributeValue type a 'e' false]
}
out.endArray();
  [else]
[generateWriteAttributeValue type a ('instance.' a.names.get '()') false]
  [/if]
[/template]

[template generateMarshalMapping Type type Attribute a]
out.beginObject();
  [if a.typeKind.multimapKind]
for (java.util.Map.Entry<[a.wrappedElementType], java.util.Collection<[a.wrappedSecondaryElementType]>> e : [a.name]Mapping.asMap().entrySet()) {
  [generateMarshalKey a]e.getKey()[/generateMarshalKey]
  out.name(key);
  out.beginArray();
  for ([a.unwrappedSecondaryElementType] value : e.getValue()) {
    [generateWriteAttributeValue type a 'value' true]
  }
  out.endArray();
}
  [else]
for (java.util.Map.Entry<[a.wrappedElementType], [a.wrappedSecondaryElementType]> e : [a.name]Mapping.entrySet()) {
  [-- only use toString with objects and boxed primitives]
  [generateMarshalKey a]e.getKey()[/generateMarshalKey]
  out.name(key);
  [-- here we assign to a unwrapped variable so overload resolution will precise]
  [a.unwrappedSecondaryElementType] value = e.getValue();
  [generateWriteAttributeValue type a 'value' true]
}
  [/if]
out.endObject();
[/template]

[template generateMarshalKey Attribute a String expression]
  [if a.unwrappedElementPrimitiveType]
String key = String.valueOf([expression]);
  [else if a.elementType eq 'java.lang.String']
String key = [expression];
  [else if a.hasEnumFirstTypeParameter]
String key = [expression].name();
  [else]
String key = [expression].toString();
  [/if]
[/template]

[template generateMarshalAttributeValue Type type Attribute a]
  [if a.nullable]
[a.atNullabilityLocal][a.type] [a.name]Value = instance.[a.names.get]();
out.name([serializedName a]);
if ([a.name]Value != null) {
  [generateWriteAttributeValue type a (a.name 'Value') false]
} else {
  out.nullValue();
}
  [else if a.optionalType]
[a.type] [a.name]Optional = instance.[a.names.get]();
out.name([serializedName a]);
if ([a.name]Optional.[optionalPresent a]) {
  [a.unwrappedElementType] [a.name]Value = [a.name]Optional.[optionalGet a];
  [generateWriteAttributeValue type a (a.name 'Value') false]
} else {
  out.nullValue();
}
  [else if a.mapType]
[a.type] [a.name]Mapping = instance.[a.names.get]();
out.name([serializedName a]);
[generateMarshalMapping type a]
  [else if a.collectionType or a.arrayType]
[a.type] [a.name]Elements = instance.[a.names.get]();
out.name([serializedName a]);
out.beginArray();
for ([a.unwrappedElementType] e : [a.name]Elements) {
  [generateWriteAttributeValue type a 'e' false]
}
out.endArray();
  [else]
out.name([serializedName a]);
[generateWriteAttributeValue type a ('instance.' a.names.get '()') false]
  [/if]
[/template]

[template generateUnmarshalingMethods Type type]
[if type.useSingletonOnly]

@Override
public [type.typeAbstract] fromJson(com.squareup.moshi.JsonReader in) throws IOException {
  in.skipValue();
  return [type.factoryInstance]();
}
[else if type.useConstructorOnly]

[for ca = type.constructorArguments]
@Override
public [type.typeAbstract] fromJson(com.squareup.moshi.JsonReader in) throws IOException {
  try {
[if singular ca]
  [for a in ca]
    return [type.factoryOf]([generateInlineUnmarshal type a]);
  [/for]
[else]
    in.beginArray();
    [type.typeAbstract] instance = [output.linesShortable][type.factoryOf]([for a in ca][if not for.first],
        [/if][generateInlineUnmarshal type a][/for]);[/output.linesShortable]
    in.endArray();
    return instance;
[/if]
  } catch (NullPointerException ex) {
    throw new com.squareup.moshi.JsonDataException("Cannot read [type.name] at " + in.getPath(), ex);
  } catch (IllegalArgumentException ex) {
    throw new com.squareup.moshi.JsonDataException("Cannot read [type.name] at " + in.getPath(), ex);
  } catch (IllegalStateException ex) {
    throw new com.squareup.moshi.JsonDataException("Cannot read [type.name] at " + in.getPath(), ex);
  }
}
[for a in ca, Decider d = adapted.decider s]
[if d.complex][-- skipping generation of attributes which are inline, see generateInlineUnmarshal --]

private [a.atNullability][constructorAcceptType a] read[toUpper a.name](com.squareup.moshi.JsonReader in) throws IOException {
  [generateConstructorArgumentComplexUnmarshal type a]
}
[/if]
[/for]
[/for]
[else]

@Override
public [type.typeAbstract] fromJson(com.squareup.moshi.JsonReader in) throws IOException {
[if type.unmarshaledAttributes]
  try {
    [type.typeBuilder] builder = [type.factoryBuilder]();
    in.beginObject();
    next: while (in.hasNext()) {
      String name = in.nextName();
      [for attrs = type.unmarshaledAttributes, Mm mm = byFirstCharacter attrs]
      [if mm.useFlatIfElse]
        [for a in attrs]
      if ([serializedName a].equals(name)) {
        [generateInlineUnmarshalBuilder type a]
        continue next;
      }
        [/for]
      [else]
      if (!name.isEmpty()) {
        switch (name.charAt(0)) {
        [for e in mm.asMap.entrySet]
        case '[e.key]':
          [for a in e.value]
          if ([serializedName a].equals(name)) {
            [generateInlineUnmarshalBuilder type a]
            continue next;
          }
          [/for]
          break;
        [/for]
        default:
        }
      }
      [/if]
      [/for]
      if (in.failOnUnknown()) {
        throw new com.squareup.moshi.JsonDataException("Unknown field of [type.name] \'" + name +  "\'"
            + ", known are [for a in type.unmarshaledAttributes][if not for.first], [/if]'[a.marshaledName]'[/for]"
            + ", at " + in.getPath());
      }
      in.skipValue();
    }
    in.endObject();
    return builder.[type.names.build]();
  } catch (NullPointerException ex) {
    throw new com.squareup.moshi.JsonDataException("Cannot read [type.name] at " + in.getPath(), ex);
  } catch (IllegalArgumentException ex) {
    throw new com.squareup.moshi.JsonDataException("Cannot read [type.name] at " + in.getPath(), ex);
  } catch (IllegalStateException ex) {
    throw new com.squareup.moshi.JsonDataException("Cannot read [type.name] at " + in.getPath(), ex);
  }
[else]
  in.beginObject();
  while (in.hasNext()) {
    String name = in.nextName();
    if (in.failOnUnknown()) {
      throw new com.squareup.moshi.JsonDataException("No field are expected in [type.name] but found \'" + name +  "\'"
          + ", at " + in.getPath());
    }
    in.skipValue();
  }
  in.endObject();
  return [type.factoryBuilder]().[type.names.build]();
[/if]
}
[for s in type.unmarshaledAttributes, Decider d = adapted.decider s]
[if d.complex][-- skipping generation of attributes which are inline, see generateInlineUnmarshalBuilder --]

private void read[toUpper s.name](com.squareup.moshi.JsonReader in, [type.typeBuilder] builder) throws IOException {
  [generateComplexTypeUnmarshalAttribute type s]
}
[/if]
[/for]
[/if]
[/template]

[template readInline Type type Attribute a String context][output.trim]
[-- context is '1' for first type argument or '2' for second type argument, otherwise '' as a general case --]
[for Decider d = adapted.decider a]
[if context eq '1']
  [for a1 = d.adapterFirst, c1 = d.enumFirst]
  [if a1]
[a.name]Adapter[context].fromJson(in)
  [else if c1]

  [/if]
  [/for]
[else if context eq '2']

[else]

[/if]
[/for]
[/output.trim][/template]

[template generateInlineUnmarshal Type type Attribute a][output.trim]
[if a.primitive]
  [simpleTypeNext a.type]
[else if a.typeKind.regular]
  [a.name]Adapter.fromJson(in)
[else]
  read[toUpper a.name](in)
[/if]
[/output.trim][/template]

[template generateInlineUnmarshalBuilder Type type Attribute a]
[if a.jsonQualiferAnnotations]
read[toUpper a.name](in, builder);
[else if a.primitive or a.stringType]
builder.[a.names.init]([simpleTypeNext a.type]);
[else if a.typeKind.regular]
builder.[a.names.init]([a.name]Adapter.fromJson(in));
[else]
read[toUpper a.name](in, builder);
[/if]
[/template]

[template generateConstructorArgumentComplexUnmarshal Type type Attribute a]
  [if a.nullable]
com.squareup.moshi.JsonReader.Token t = in.peek();
if (t == com.squareup.moshi.JsonReader.Token.NULL) {
  in.nextNull();
  return null;
}
[generateReadAttributeValue type a a.type a.rawType false]
return value;
  [else if a.optionalType]
com.squareup.moshi.JsonReader.Token t = in.peek();
if (t == com.squareup.moshi.JsonReader.Token.NULL) {
  in.nextNull();
  return [optionalEmpty a];
}
    [if a.jdkSpecializedOptional]
return [a.rawType].of([simpleTypeNext a.unwrappedElementType]);
    [else if a.unwrappedElementPrimitiveType or (a.unwrappedElementType eq 'java.lang.String')]
return [optionalOf a]([simpleTypeNext a.unwrappedElementType]);
    [else]
[generateReadAttributeValue type a a.wrappedElementType a.unwrapperOrRawElementType false]
return [optionalOf a](value);
    [/if]
  [else if a.mapType]
[createBuilderForCollection type a 'mappings']
[generateMappingUnmarshalCode type a 'mappings.put']
[returnBuiltCollection type a 'mappings']
  [else if a.collectionType]
[createBuilderForCollection type a 'elements']
[generateCollectionUnmarshalCode type a 'elements.add']
[returnBuiltCollection type a 'elements']
  [else if a.arrayType]
java.util.List<[a.elementType]> elements = new java.util.ArrayList<[a.elementType]>();
[generateCollectionUnmarshalCode type a ('elements.add')]
return elements.toArray(new [a.elementType]['[']elements.size()[']']);
  [else]
[generateReadAttributeValue type a a.type a.rawType false]
return value;
  [/if]
[/template]

[template createBuilderForCollection Type type Attribute a String variableName]
[if a.mapType]
[let mapParams]<[a.wrappedElementType], [a.wrappedSecondaryElementType]>[/let]
  [if type.generateJdkOnly or a.typeKind.isSortedKind]
java.util.Map[mapParams] [variableName] = new java.util.LinkedHashMap[mapParams]();
  [else]
[guava].collect.Immutable[a.typeKind.rawSimpleName].Builder[mapParams] [variableName] = [guava].collect.Immutable[a.typeKind.rawSimpleName].builder();
  [/if]
[else if a.collectionType]
  [if type.generateJdkOnly or a.typeKind.isSortedKind]
java.util.List<[a.elementType]> [variableName] = new java.util.ArrayList<[a.elementType]>();
  [else]
[guava].collect.Immutable[a.typeKind.rawSimpleName].Builder<[a.elementType]> [variableName] = [guava].collect.Immutable[a.typeKind.rawSimpleName].builder();
  [/if]
[/if]
[/template]

[template returnBuiltCollection Type type Attribute a String variableName]
  [if type.generateJdkOnly or a.typeKind.isSortedKind]
return [variableName];
  [else]
return [variableName].build();
  [/if]
[/template]

[template collectionUnmarshalCaseNullSingleArray Invokable unmarshalCollectionElement]
com.squareup.moshi.JsonReader.Token t = in.peek();
if (t == com.squareup.moshi.JsonReader.Token.BEGIN_ARRAY) {
  in.beginArray();
  while (in.hasNext()) {
    [unmarshalCollectionElement]
  }
  in.endArray();
} else if (t == com.squareup.moshi.JsonReader.Token.NULL) {
  in.nextNull();
} else {
  [unmarshalCollectionElement]
}
[/template]

[template generateMappingUnmarshalCode Type type Attribute a String collectorExpression]
if (in.peek() == com.squareup.moshi.JsonReader.Token.NULL) {
  in.nextNull();
} else {
  in.beginObject();
  while (in.hasNext()) {
[if a.unwrappedElementPrimitiveType]
  [if a.unwrappedElementType eq 'char']
    char key = charValueOf(in.nextName());
  [else]
    [a.unwrappedElementType] key = [a.wrappedElementType].parse[toUpper a.unwrappedElementType](in.nextName());
  [/if]
[else if a.wrappedElementType eq 'java.lang.String']
    [a.wrappedElementType] key = in.nextName();
[else if adapted.isEnum a.elementType]
  [for EnumDefinition en = adapted.enums a.elementType]
    [a.elementType] key = [en.simple]FromString(in.nextName(), in);
  [/for]
[else]
  [output.error]unsupported type for mapping key in attribute: [a.type].[a.name]. Use only primitive wrapper types, strings or local enums (covered by scope of @JsonAdapted)[/output.error]
[/if]
  [if a.typeKind.isMultimapKind]
    if (in.peek() == com.squareup.moshi.JsonReader.Token.BEGIN_ARRAY) {
      in.beginArray();
      while (in.hasNext()) {
        [generateReadAttributeValue type a a.wrappedSecondaryElementType a.unwrapperOrRawSecondaryElementType true]
        [collectorExpression](key, value);
      }
      in.endArray();
    } else {
      [generateReadAttributeValue type a a.wrappedSecondaryElementType a.unwrapperOrRawSecondaryElementType true]
      [collectorExpression](key, value);
    }
  [else]
    [generateReadAttributeValue type a a.wrappedSecondaryElementType a.unwrapperOrRawSecondaryElementType true]
    [collectorExpression](key, value);
  [/if]
  }
  in.endObject();
}
[/template]

[template generateCollectionUnmarshalCode Type type Attribute a String collectorExpression]
[collectionUnmarshalCaseNullSingleArray]
  [if adapted.isEnum a.unwrappedElementType]
[collectorExpression]([simpleTypeNext a.unwrappedElementType]);
  [else if a.unwrappedElementPrimitiveType or (a.unwrappedElementType eq 'java.lang.String')]
[collectorExpression]([simpleTypeNext a.unwrappedElementType]);
  [else]
[generateReadAttributeValue type a a.wrappedElementType a.unwrapperOrRawElementType false]
[collectorExpression](value);
  [/if]
[/collectionUnmarshalCaseNullSingleArray]
[/template]

[template generateComplexTypeUnmarshalAttribute Type type Attribute a]
  [if a.nullable]
com.squareup.moshi.JsonReader.Token t = in.peek();
if (t == com.squareup.moshi.JsonReader.Token.NULL) {
  in.nextNull();
} else {
    [if a.stringType]
  builder.[a.names.init]([simpleTypeNext a.unwrappedElementType]);
    [else if adapted.isEnum a.unwrappedElementType]
  builder.[a.names.init]([simpleTypeNext a.unwrappedElementType]);
    [else]
  [generateReadAttributeValue type a a.type a.unwrapperOrRawElementType false]
  builder.[a.names.init](value);
    [/if]
}
  [else if a.stringType]
  builder.[a.names.init]([simpleTypeNext a.unwrappedElementType]);
  [else if a.optionalType]
com.squareup.moshi.JsonReader.Token t = in.peek();
if (t == com.squareup.moshi.JsonReader.Token.NULL) {
  in.nextNull();
} else {
    [if a.unwrappedElementPrimitiveType or (a.unwrappedElementType eq 'java.lang.String')]
  builder.[a.names.init]([simpleTypeNext a.unwrappedElementType]);
    [else if adapted.isEnum a.unwrappedElementType]
  builder.[a.names.init]([simpleTypeNext a.unwrappedElementType]);
    [else]
  [generateReadAttributeValue type a a.wrappedElementType a.unwrapperOrRawElementType false]
  builder.[a.names.init](value);
    [/if]
}
  [else if a.mapType]
[generateMappingUnmarshalCode type a ('builder.' a.names.put)]
  [else if a.collectionType]
[generateCollectionUnmarshalCode type a ('builder.' a.names.add)]
  [else if a.arrayType]
java.util.List<[a.elementType]> elements = new java.util.ArrayList<[a.elementType]>();
[generateCollectionUnmarshalCode type a ('elements.add')]
builder.[a.names.init](elements.toArray(new [a.elementType]['[']elements.size()[']']));
  [else]
[generateReadAttributeValue type a a.type a.rawType false]
builder.[a.names.init](value);
  [/if]
[/template]

[template generateReadAttributeValue Type type Attribute attribute String genericType String rawType Boolean secondary]
[if secondary]
  [if attribute.requiresMarshalingSecondaryAdapter]
[genericType] value = [attribute.name]Adapter.fromJson(in);
  [else]
[attribute.unwrappedSecondaryElementType] value = [simpleTypeNext attribute.unwrappedSecondaryElementType];
  [/if]
[else]
  [if attribute.requiresMarshalingAdapter]
[genericType] value = [attribute.name]Adapter.fromJson(in);
  [else]
[attribute.unwrappedElementType] value = [simpleTypeNext attribute.unwrappedElementType];
  [/if]
[/if]
[/template]

[template generateWriteAttributeValue Type type Attribute attribute String variableName Boolean secondary]
[if secondary]
  [if attribute.requiresMarshalingSecondaryAdapter]
[attribute.name]Adapter.toJson(out, [variableName]);
  [else]
[simpleTypeWrite attribute.secondaryElementType variableName]
  [/if]
[else]
  [if attribute.requiresMarshalingAdapter]
[attribute.name]Adapter.toJson(out, [variableName]);
  [else]
[simpleTypeWrite attribute.unwrappedElementType variableName]
  [/if]
[/if]
[/template]

[template simpleTypeWrite String typeName String variableName]
[if typeName eq 'char']
out.value(String.valueOf([variableName]));
[else]
out.value([variableName]);
[/if]
[/template]

[template simpleTypeNext String typeName][output.trim]
  [if typeName eq 'boolean']
in.nextBoolean()
  [else if typeName eq 'byte']
(byte) in.nextInt()
  [else if typeName eq 'short']
(short) in.nextInt()
  [else if typeName eq 'int']
in.nextInt()
  [else if typeName eq 'long']
in.nextLong()
  [else if typeName eq 'float']
(float) in.nextDouble()
  [else if typeName eq 'double']
in.nextDouble()
  [else if typeName eq 'java.lang.String']
in.nextString()
  [else if typeName eq 'char']
charValueOf(in.nextString())
  [else if adapted.isEnum typeName]
    [for EnumDefinition en = adapted.enums typeName]
[en.simple]FromString(in.nextString(), in)
    [/for]
  [else]null[output.error]unexpected type [typeName], not a simple one[/output.error]
  [/if]
[/output.trim][/template]

[template constructorAcceptType Attribute a][output.trim]
[if a.typeKind.isMultimapKind]
  [guava].collect.Multimap<[a.elementType], [a.secondaryElementType]>
[else if a.typeKind.isMapKind]
  java.util.Map<[a.elementType], [a.secondaryElementType]>
[else if a.typeKind.isCollectionKind]
  Iterable<[a.elementType]>
[else]
  [a.type]
[/if]
[/output.trim][/template]

[template checkAttributes Type type]
[for a in type.implementedAttributes if a.jsonIgnore and a.mandatory]
[-- mandatory constructor arguments are not checked, should they? --]
[output.error]
@JsonAdapted.Ignore could not be used on mandatory attribute '[type.typeAbstract.relative].[a.name]'
[/output.error]
[/for]
[/template]

[template generateUtility Adapted adapted]
[for t in adapted.types, a in t.allMarshalingAttributes if a.jsonQualiferAnnotations]
[if for.first]

@SuppressWarnings("unchecked") // checked in runtime to match expected type
private static <T> com.squareup.moshi.JsonAdapter<T> adapter(com.squareup.moshi.Moshi moshi, Class<?> type, String field) {
  try {
    java.util.reflect.Field field = type.getDeclaredField(field);
    java.lang.Set<Annotation> annotations = new java.lang.HashSet<Annotation>();
    for (Annotation a : field.getDeclaredAnnotations()) {
      annotations.add(a);
    }
    return (T) moshi.adapter(field.getGenericType(), annotations);
  } catch (Exception ex) {
    throw new AssertionError("Reflection failed", ex);
  }
}
[/if]
[/for]
[for t in adapted.types,
    a in t.unmarshaledAttributes if a.unwrappedElementType eq 'char']
[if for.first]

private static char charValueOf(String string) {
  if (string.length() == 1) return string.charAt(0);
  throw new IllegalArgumentException("Expected string with a single character but was '" + string + "'");
}
[/if]
[/for]
[for en in adapted.enums.all]
[if en.useFromString]

private static [en.qualified] [en.simple]FromString(String string, com.squareup.moshi.JsonReader in) {
  [if en.useFlatIfElse]
    [for c in en.constants]
  if ("[c.json]".equals(string)) {
    return [en.qualified].[c.name];
  }
    [/for]
  [else]
  if (!string.isEmpty()) {
    switch (string.charAt(0)) {
    [for e in en.byFirstLetter.asMap.entrySet]
    case '[e.key]':
      [for c in e.value]
      if ("[c.json]".equals(string)) {
        return [en.qualified].[c.name];
      }
      [/for]
      break;
    [/for]
    default:
    }
  }
  [/if]
  throw new com.squareup.moshi.JsonDataException("Unknown value for [en.qualified] \'" + string +  "\'"
      + ", known are [for c in en.constants][if not for.first], [/if]'[c.json]'[/for]"
      + ", at " + in.getPath());
}
[/if]
[if en.useToString]

private static String [en.simple]ToString([en.qualified] value) {
  switch (value) {
  [for c in en.constants]
  case [c.name]: return "[c.json]";
  [/for]
  default: throw new AssertionError();
  }
}
[/if]
[/for]
[/template]

[template serializedName Attribute a]"[a.marshaledName]"[/template]

[template optionalGet Attribute a][if a.jdkSpecializedOptional]getAs[toUpper a.elementType][else]get[/if]()[/template]

[template optionalEmpty Attribute a][a.rawType].[if a.jdkOptional]empty[else if a.fugueOptional or a.javaslangOptional]none[else]absent[/if]()[/template]

[template optionalOf Attribute a][a.rawType].[if not a.optionalAcceptNullable][if a.fugueOptional or a.javaslangOptional]some[else]of[/if][else if a.jdkOptional]ofNullable[else if a.fugueOptional]option[else if a.javaslangOptional]of[else]fromNullable[/if][/template]

[template optionalPresent Attribute a][if a.fugueOptional or a.javaslangOptional]isDefined[else]isPresent[/if]()[/template]
