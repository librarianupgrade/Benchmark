[--
   Copyright 2014-2018 Immutables Authors and Contributors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
--]
[template public generate]
  [for type in values.values if type.generateTransformer]
    [if type.kind.isEnclosing]
[for String transformersClassname = ((toUpper type.name) 'Transformer')]
[output.java type.package transformersClassname type.element]
[type.sourceHeader]
[generateTransformer type transformersClassname]
[/output.java]
[/for]
    [else]
[output.error]
Use @Trees.Transform to annotate umbrella class with @Value.Enclosing
[/output.error]
    [/if]
  [/for]
[/template]

[template generateTransformer Type transformerType String transformersClassname]
[if transformerType.package]
package [transformerType.package];
[/if]

[if transformerType.generateSuppressAllWarnings]@SuppressWarnings("all")[/if]
[if transformerType allowsClasspathAnnotation 'javax.annotation.ParametersAreNonnullByDefault']
@javax.annotation.ParametersAreNonnullByDefault
[/if]
[if transformerType allowsClasspathAnnotation 'javax.annotation.processing.Generated']
@javax.annotation.processing.Generated("org.immutables.processor.ProxyProcessor")
[else if transformerType allowsClasspathAnnotation 'javax.annotation.Generated']
@javax.annotation.Generated("org.immutables.processor.ProxyProcessor")
[/if]
[if transformerType allowsClasspathAnnotation 'org.immutables.value.Generated']
@org.immutables.value.Generated(from = "[transformerType.typeAbstract.relativeRaw]", generator = "Transformers")
[/if]
[transformerType.typeValue.access]abstract class [transformersClassname] {
  protected [transformersClassname]() {}
  [for cases = transformerType.cases,
       type in cases.implementedTypes,
       t = type.typeValue,
       im = type.typeImmutable,
       s = type.name,
       Boolean useCopy = type.useBuilder or (type.useCopyConstructor and type.useCopyMethods)]
  [if useCopy]

  public [t] to[s]([t] value) {
    [if type.generateWithInterface]
    return value[for a in type.settableAttributes]
        .[a.names.with](as[s][transformAttributeSuffix a](value, value.[a.names.get]()))[/for];
    [else if type.useCopyConstructor and type.useCopyMethods]
      [if type.constitution.returnsAbstractValueType]
    [im] copy  = ([im]) [type.factoryCopyOf](value);
        [for a in type.settableAttributes]
    copy = ([im]) copy.[a.names.with](as[s][transformAttributeSuffix a](value, value.[a.names.get]()));
        [/for]
    return copy;
      [else]
    return [if t eq im]value[else][type.factoryCopyOf](value)[/if][for a in type.settableAttributes]
        .[a.names.with](as[s][transformAttributeSuffix a](value, value.[a.names.get]()))[/for];
      [/if]
    [else if type.useBuilder]
    return [type.factoryBuilder.relative]()
        [for v in type.settableAttributes]
          [if v.collectionType]
        .[v.names.addAll](as[s][transformAttributeSuffix v](value, value.[v.names.get]()))
          [else if v.mapType]
        .[v.names.putAll](as[s][transformAttributeSuffix v](value, value.[v.names.get]()))
          [else]
        .[v.names.init](as[s][transformAttributeSuffix v](value, value.[v.names.get]()))
          [/if]
        [/for]
        .[type.names.build]();
    [else][-- unreachable --]
    return value;
    [/if]
  }
  [else]

  public [t] to[s]([t] value) {
    return value;
  }
  [/if]
  [for a in type.settableAttributes if useCopy]
    [if a.nullable]

  protected [a.rawType]<[a.wrappedElementType]> as[s][transformAttributeSuffix a]([t] value, [a.atNullability][a.type] nullable) {
    if (nullable != null) {
      return as[s][toUpper a.name](value, nullable);
    }
    return null;
  }
    [else if a.optionalType]

  protected [a.rawType]<[a.wrappedElementType]> as[s][transformAttributeSuffix a]([t] value, [a.type] optional) {
    if (optional.[optionalPresent a]) {
      [a.unwrappedElementType] original = optional.[optionalGet a];
      [a.unwrappedElementType] changed = as[s][toUpper a.name](value, original);
      return changed != original ? [optionalOf a](changed) : optional;
    }
    return [optionalEmpty a];
  }
    [else if a.collectionType]

  protected Iterable<[a.wrappedElementType]> as[s][transformAttributeSuffix a]([t] value, [a.type] elements) {
    java.util.Collection<[a.wrappedElementType]> changedElements = new java.util.ArrayList<>(elements.size());
    boolean haveChanged = false;
    for ([a.unwrappedElementType] original : elements) {
      [a.unwrappedElementType] changed = as[s][toUpper a.name](value, original);
      if (changed != original) {
        haveChanged = true;
      }
      changedElements.add(changed);
    }
    return haveChanged ? changedElements : elements;
  }
    [else if a.mapType]
      [for gE = a.consumedElementType,
          uK = a.unwrappedElementType,
          wK = a.wrappedElementType,
          uV = a.unwrappedSecondaryElementType,
          wV = a.wrappedSecondaryElementType]
  [let mappingType][if a.multimapType][guava].collect.Multimap[else]java.util.Map[/if]<[wK], [wV]>[/let]
  [let mappingConstruct][if a.multimapType][guava].collect.ArrayListMultimap.create(entries.size(), 3)[else]new java.util.LinkedHashMap<[wK], [wV]>(entries.size())[/if][/let]

  protected [mappingType] as[s][transformAttributeSuffix a]([t] value, [a.type] entries) {
    [mappingType] changedEntries = [mappingConstruct];
    boolean haveChanged = false;
    for (java.util.Map.Entry<[wK], [wV]> entry : entries.[if a.multimapType]entries()[else]entrySet()[/if]) {
      [uV] original = entry.getValue();
      [uV] changed = as[s][toUpper a.name](value, original);
      if (changed != original) {
        haveChanged = true;
      }
      changedEntries.put(entry.getKey(), changed);
    }
    return haveChanged ? changedEntries : entries;
  }
      [/for]
    [/if]
  [for et = a.unwrappedValueElementType]

  protected [et] as[s][toUpper a.name]([t] value, [et] attribute) {
    [if cases.isImplementedType et]
    return to[simplifyName et](attribute);
    [else][for Type subtype in cases.knownSubtypes et]
    if (attribute instanceof [subtype.typeValue]) {
      return as[simplifyName et](([subtype.typeValue]) attribute);
    }
    [/for]
    return attribute;
    [/if]
  }
  [/for]
  [/for]
  [/for]
  [for cases = transformerType.cases,
       e in cases.subtypeUsages.entries,
       k = e.key,
       v = e.value,
       t = v.typeValue]

  protected [k] as[simplifyName e.key]([t] value) {
  [if cases.isImplementedType t]
    return to[v.name](value);
  [else]
    return value;
  [/if]
  }
  [/for]
}
[/template]

[template transformAttributeSuffix Attribute a][toUpper a.name][output.trim]
[if a.nullable]Nullable
[else if a.fugueOptional]Option
[else if a.optionalType]Optional
[else if a.mapType]Entries
[else if a.collectionType]Elements
[/if]
[/output.trim][/template]

[template optionalGet Attribute a][if a.jdkSpecializedOptional]getAs[toUpper a.elementType][else]get[/if]()[/template]

[template optionalEmpty Attribute a][a.rawType].[if a.jdkOptional]empty[else if a.fugueOptional or a.javaslangOptional]none[else]absent[/if]()[/template]

[template optionalOf Attribute a][a.rawType].[if not a.optionalAcceptNullable][if a.fugueOptional or a.javaslangOptional]some[else]of[/if][else if a.jdkOptional]ofNullable[else if a.fugueOptional]option[else if a.javaslangOptional]of[else]fromNullable[/if][/template]

[template optionalPresent Attribute a][if a.fugueOptional or a.javaslangOptional]isDefined[else]isPresent[/if]()[/template]
